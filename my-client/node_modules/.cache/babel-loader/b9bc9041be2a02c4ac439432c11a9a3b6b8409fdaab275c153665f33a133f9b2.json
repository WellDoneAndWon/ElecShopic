{"ast":null,"code":"import { jwtDecode } from \"jwt-decode\";\nimport { $authHost, $host } from \"./index\";\nexport const registration = async (email, password, role = 'USER') => {\n  const {\n    data\n  } = await $host.post('api/user/registration', {\n    email,\n    password,\n    role\n  });\n  localStorage.setItem('token', data.token);\n  const decoded = jwtDecode(data.token); // Декодируем токен\n  return {\n    ...decoded,\n    role: decoded.role // Берем роль из декодированного токена\n  };\n};\nexport const login = async (email, password) => {\n  const {\n    data\n  } = await $host.post('api/user/login', {\n    email,\n    password\n  });\n  localStorage.setItem('token', data.token);\n  const decoded = jwtDecode(data.token);\n  return {\n    ...decoded,\n    role: decoded.role // Важно: роль берется из декодированного токена\n  };\n};\nexport const check = async () => {\n  const {\n    data\n  } = await $authHost.get('api/user/auth');\n  localStorage.setItem('token', data.token);\n  const decoded = jwtDecode(data.token); // Декодируем токен\n  return {\n    ...decoded,\n    role: decoded.role // Берем роль из декодированного токена\n  };\n};\n\n// Новые функции для управления пользователями (только для ADMIN)\nexport const fetchUsers = async () => {\n  const {\n    data\n  } = await $authHost.get('api/user/admin');\n  return data;\n};\nexport const updateUserRole = async (id, role) => {\n  const {\n    data\n  } = await $authHost.put(`api/user/${id}/role`, {\n    role\n  });\n  return data;\n};","map":{"version":3,"names":["jwtDecode","$authHost","$host","registration","email","password","role","data","post","localStorage","setItem","token","decoded","login","check","get","fetchUsers","updateUserRole","id","put"],"sources":["C:/ElecShopic/my-client/src/http/userAPI.js"],"sourcesContent":["import { jwtDecode } from \"jwt-decode\";\r\nimport { $authHost, $host } from \"./index\";\r\n\r\nexport const registration = async (email, password, role = 'USER') => {\r\n    const { data } = await $host.post('api/user/registration', { email, password, role });\r\n    localStorage.setItem('token', data.token);\r\n    const decoded = jwtDecode(data.token); // Декодируем токен\r\n    return {\r\n        ...decoded,\r\n        role: decoded.role // Берем роль из декодированного токена\r\n    };\r\n}\r\n\r\nexport const login = async (email, password) => {\r\n    const { data } = await $host.post('api/user/login', { email, password });\r\n    localStorage.setItem('token', data.token);\r\n    const decoded = jwtDecode(data.token);\r\n    return {\r\n        ...decoded,\r\n        role: decoded.role // Важно: роль берется из декодированного токена\r\n    };\r\n};\r\n\r\n\r\nexport const check = async () => {\r\n    const { data } = await $authHost.get('api/user/auth');\r\n    localStorage.setItem('token', data.token);\r\n    const decoded = jwtDecode(data.token); // Декодируем токен\r\n    return {\r\n        ...decoded,\r\n        role: decoded.role // Берем роль из декодированного токена\r\n    };\r\n};\r\n\r\n// Новые функции для управления пользователями (только для ADMIN)\r\nexport const fetchUsers = async () => {\r\n    const { data } = await $authHost.get('api/user/admin');\r\n    return data;\r\n};\r\n\r\nexport const updateUserRole = async (id, role) => {\r\n    const { data } = await $authHost.put(`api/user/${id}/role`, { role });\r\n    return data;\r\n};\r\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,YAAY;AACtC,SAASC,SAAS,EAAEC,KAAK,QAAQ,SAAS;AAE1C,OAAO,MAAMC,YAAY,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,EAAEC,IAAI,GAAG,MAAM,KAAK;EAClE,MAAM;IAAEC;EAAK,CAAC,GAAG,MAAML,KAAK,CAACM,IAAI,CAAC,uBAAuB,EAAE;IAAEJ,KAAK;IAAEC,QAAQ;IAAEC;EAAK,CAAC,CAAC;EACrFG,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,IAAI,CAACI,KAAK,CAAC;EACzC,MAAMC,OAAO,GAAGZ,SAAS,CAACO,IAAI,CAACI,KAAK,CAAC,CAAC,CAAC;EACvC,OAAO;IACH,GAAGC,OAAO;IACVN,IAAI,EAAEM,OAAO,CAACN,IAAI,CAAC;EACvB,CAAC;AACL,CAAC;AAED,OAAO,MAAMO,KAAK,GAAG,MAAAA,CAAOT,KAAK,EAAEC,QAAQ,KAAK;EAC5C,MAAM;IAAEE;EAAK,CAAC,GAAG,MAAML,KAAK,CAACM,IAAI,CAAC,gBAAgB,EAAE;IAAEJ,KAAK;IAAEC;EAAS,CAAC,CAAC;EACxEI,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,IAAI,CAACI,KAAK,CAAC;EACzC,MAAMC,OAAO,GAAGZ,SAAS,CAACO,IAAI,CAACI,KAAK,CAAC;EACrC,OAAO;IACH,GAAGC,OAAO;IACVN,IAAI,EAAEM,OAAO,CAACN,IAAI,CAAC;EACvB,CAAC;AACL,CAAC;AAGD,OAAO,MAAMQ,KAAK,GAAG,MAAAA,CAAA,KAAY;EAC7B,MAAM;IAAEP;EAAK,CAAC,GAAG,MAAMN,SAAS,CAACc,GAAG,CAAC,eAAe,CAAC;EACrDN,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,IAAI,CAACI,KAAK,CAAC;EACzC,MAAMC,OAAO,GAAGZ,SAAS,CAACO,IAAI,CAACI,KAAK,CAAC,CAAC,CAAC;EACvC,OAAO;IACH,GAAGC,OAAO;IACVN,IAAI,EAAEM,OAAO,CAACN,IAAI,CAAC;EACvB,CAAC;AACL,CAAC;;AAED;AACA,OAAO,MAAMU,UAAU,GAAG,MAAAA,CAAA,KAAY;EAClC,MAAM;IAAET;EAAK,CAAC,GAAG,MAAMN,SAAS,CAACc,GAAG,CAAC,gBAAgB,CAAC;EACtD,OAAOR,IAAI;AACf,CAAC;AAED,OAAO,MAAMU,cAAc,GAAG,MAAAA,CAAOC,EAAE,EAAEZ,IAAI,KAAK;EAC9C,MAAM;IAAEC;EAAK,CAAC,GAAG,MAAMN,SAAS,CAACkB,GAAG,CAAC,YAAYD,EAAE,OAAO,EAAE;IAAEZ;EAAK,CAAC,CAAC;EACrE,OAAOC,IAAI;AACf,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}