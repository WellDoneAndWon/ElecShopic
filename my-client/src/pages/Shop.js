import React, { useContext, useEffect, useState, useMemo } from 'react';
import { Col, Container, Row, Form, Button } from "react-bootstrap";
import TypeBar from '../components/TypeBar';
import BrandBar from "../components/BrandBar";
import DeviceList from "../components/DeviceList";
import { Context } from "../index";
import { fetchTypes, fetchBrands, fetchDevices, fetchPriceRange } from "../http/deviceAPI";
import { observer } from "mobx-react-lite";
import Pages from "../components/Pages";
import MultiRangeSlider from "../components/MultiRangeSlider";

const Shop = observer(() => {
    const { device } = useContext(Context);
    const [search, setSearch] = useState("");
    const [isLoading, setIsLoading] = useState(true);

    // –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ (min/max –ø–æ –≤—Å–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–º —Ç–æ–≤–∞—Ä–∞–º)
    const [priceBounds, setPriceBounds] = useState({ minPrice: 0, maxPrice: 0 });
    const [priceRange, setPriceRange] = useState({ min: 0, max: 0 });
    const [inputMin, setInputMin] = useState(0);
    const [inputMax, setInputMax] = useState(0);

    // –°–±—Ä–æ—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    useEffect(() => {
        device.setPage(1);
        // eslint-disable-next-line
    }, [device.selectedType, device.selectedBrand, search, priceRange]);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–∏–ø–æ–≤, –±—Ä–µ–Ω–¥–æ–≤, –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ü–µ–Ω
    useEffect(() => {
        setIsLoading(true);
        Promise.all([
            fetchTypes(),
            fetchBrands(),
            fetchPriceRange(null, null)
        ])
            .then(([typesData, brandsData, priceData]) => {
                device.setTypes(typesData);
                device.setBrands(brandsData);
                setPriceBounds(priceData);
                setPriceRange({ min: priceData.minPrice, max: priceData.maxPrice });
                setInputMin(priceData.minPrice);
                setInputMax(priceData.maxPrice);
            })
            .finally(() => setIsLoading(false));
    }, [device]);

    // –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–∏–ø–∞ –∏–ª–∏ –±—Ä–µ–Ω–¥–∞ ‚Äî –æ–±–Ω–æ–≤–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω –∏ —Å–±—Ä–æ—Å–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
    useEffect(() => {
        const fetchBounds = async () => {
            const typeId = device.selectedType?.id || null;
            const brandId = device.selectedBrand?.id || null;
            const data = await fetchPriceRange(typeId, brandId);
            setPriceBounds(data);
            setPriceRange({ min: data.minPrice, max: data.maxPrice });
            setInputMin(data.minPrice);
            setInputMax(data.maxPrice);
        };
        fetchBounds();
    }, [device.selectedType, device.selectedBrand]);

    // –ó–∞–≥—Ä—É–∑–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (–ø–∞–≥–∏–Ω–∞—Ü–∏—è)
    useEffect(() => {
        setIsLoading(true);
        fetchDevices(device.selectedType?.id, device.selectedBrand?.id, device.page, 3)
            .then(data => {
                device.setDevices(data.rows);
                device.setTotalCount(data.count);
            })
            .finally(() => setIsLoading(false));
    }, [device.page, device.selectedType, device.selectedBrand, priceRange]);

    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Ü–µ–Ω–µ
    const handleApplyPrice = () => {
        const min = Math.max(priceBounds.minPrice, Math.min(Number(inputMin), Number(inputMax) - 1));
        const max = Math.min(priceBounds.maxPrice, Math.max(Number(inputMax), Number(inputMin) + 1));
        setPriceRange({ min, max });
        setInputMin(min);
        setInputMax(max);
    };

    // –°–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Ü–µ–Ω–µ
    const handleResetPrice = () => {
        setPriceRange({ min: priceBounds.minPrice, max: priceBounds.maxPrice });
        setInputMin(priceBounds.minPrice);
        setInputMax(priceBounds.maxPrice);
    };

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–æ –ø–æ–∏—Å–∫—É –∏ —Ü–µ–Ω–µ
    const filteredDevices = useMemo(() => {
        return device.devices.filter(dev =>
            dev.name.toLowerCase().includes(search.toLowerCase()) &&
            dev.price >= priceRange.min &&
            dev.price <= priceRange.max
        );
    }, [device.devices, search, priceRange]);

    return (
        <Container>
            <Row className="mt-2 align-items-center">
                <Col md={3}>
                    <Form.Control
                        type="text"
                        placeholder="üîç –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É..."
                        value={search}
                        onChange={e => setSearch(e.target.value)}
                        style={{
                            marginBottom: 0,
                            borderRadius: 12,
                            fontSize: 17,
                            boxShadow: "0 2px 8px rgba(0,0,0,0.04)",
                            padding: "10px 16px"
                        }}
                    />
                </Col>
                <Col md={9}>
                    <BrandBar />
                </Col>
            </Row>
            <Row className="mt-3">
                <Col md={3}>
                    <TypeBar />
                    {/* –§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ */}
                    <div className="mt-4 p-3" style={{
                        background: '#f8f9fa',
                        borderRadius: 12,
                        boxShadow: '0 2px 6px rgba(0,0,0,0.05)'
                    }}>
                        <h6 className="mb-3">–¶–µ–Ω–∞</h6>
                        <MultiRangeSlider
                            min={priceBounds.minPrice}
                            max={priceBounds.maxPrice}
                            minValue={inputMin}
                            maxValue={inputMax}
                            onChange={({ min, max }) => {
                                setInputMin(min);
                                setInputMax(max);
                            }}
                        />
                        <div className="d-flex justify-content-between mt-2">
                            <Form.Control
                                type="number"
                                value={inputMin}
                                min={priceBounds.minPrice}
                                max={inputMax - 1}
                                onChange={e => setInputMin(e.target.value)}
                                style={{ width: '45%' }}
                                placeholder="–ú–∏–Ω. —Ü–µ–Ω–∞"
                            />
                            <span className="mx-2">‚Äî</span>
                            <Form.Control
                                type="number"
                                value={inputMax}
                                min={Number(inputMin) + 1}
                                max={priceBounds.maxPrice}
                                onChange={e => setInputMax(e.target.value)}
                                style={{ width: '45%' }}
                                placeholder="–ú–∞–∫—Å. —Ü–µ–Ω–∞"
                            />
                        </div>
                        <div className="text-muted mt-2" style={{ fontSize: '12px' }}>
                            –î–∏–∞–ø–∞–∑–æ–Ω: {priceBounds.minPrice?.toLocaleString()} - {priceBounds.maxPrice?.toLocaleString()} ‚ÇΩ
                        </div>
                        <Button
                            variant="primary"
                            className="mt-2 w-100"
                            onClick={handleApplyPrice}
                        >
                            –ü—Ä–∏–º–µ–Ω–∏—Ç—å
                        </Button>
                        <Button
                            variant="link"
                            className="mt-1 p-0 w-100"
                            onClick={handleResetPrice}
                        >
                            –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä
                        </Button>
                    </div>
                </Col>
                <Col md={9}>
                    {isLoading ? (
                        <div className="d-flex justify-content-center align-items-center h-100">
                            <div className="spinner-border text-primary" role="status">
                                <span className="visually-hidden">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
                            </div>
                        </div>
                    ) : filteredDevices.length === 0 ? (
                        <div className="d-flex justify-content-center align-items-center h-100">
                            <p className="text-muted">–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
                        </div>
                    ) : (
                        <>
                            <DeviceList devices={filteredDevices} />
                            <Pages />
                        </>
                    )}
                </Col>
            </Row>
        </Container>
    );
});

export default Shop;
